#n
#t/* USER CODE BEGIN RTOS_MUTEX */
#t/* add mutexes, ... */
#t/* USER CODE END RTOS_MUTEX */
#n
#t/* USER CODE BEGIN RTOS_SEMAPHORES */
#t/* add semaphores, ... */
#t/* USER CODE END RTOS_SEMAPHORES */
#n
#t/* USER CODE BEGIN RTOS_TIMERS */
#t/* start timers, add new ones, ... */
#t/* USER CODE END RTOS_TIMERS */
#n#t/* Create the thread(s) */
#t/* definition and creation of defaultTask */
#tosThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
#tdefaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
#n
#t/* definition and creation of WheelDriverTask */
#tosThreadDef(WheelDriverTask, StartWheelDriverTask, osPriorityNormal, 0, 128);
#tWheelDriverTaskHandle = osThreadCreate(osThread(WheelDriverTask), NULL);
#n
#t/* definition and creation of LED_Blink_Task */
#tosThreadDef(LED_Blink_Task, StartLED_Blink_Task, osPriorityIdle, 0, 128);
#tLED_Blink_TaskHandle = osThreadCreate(osThread(LED_Blink_Task), NULL);
#n
#t/* definition and creation of Commuicate_Task */
#tosThreadDef(Commuicate_Task, StartCommuicate_Task, osPriorityNormal, 0, 128);
#tCommuicate_TaskHandle = osThreadCreate(osThread(Commuicate_Task), NULL);
#n
#n
#t/* USER CODE BEGIN RTOS_THREADS */
#t/* add threads, ... */
#t/* USER CODE END RTOS_THREADS */
#n
#n
#t/* USER CODE BEGIN RTOS_QUEUES */
#t/* add queues, ... */
#t/* USER CODE END RTOS_QUEUES */
